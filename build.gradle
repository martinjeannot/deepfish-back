buildscript {
    ext {
        springBootVersion = '1.5.10.RELEASE'
        querydslVersion = "4.1.4"
        metaModelsSourcesDir = file("metamodels")
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'net.ltgt.apt' version '0.9'
    id 'io.franzbecker.gradle-lombok' version '1.11'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'


group = 'com.deepfish'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_1_8

configurations {
    querydslapt
}

sourceSets {
    main {
        java {
            srcDir metaModelsSourcesDir
        }
    }
}

bootRun {
    // support passing system properties via command-line (-D)
    systemProperties = System.properties
}

tasks.withType(JavaCompile) {
    // enable the standard JDK Reflection API to retrieve formal parameters names (used by Spring Security)
    options.compilerArgs << '-parameters'
}

task querymodels(type: JavaCompile, group: 'build') {
    doFirst {
        delete metaModelsSourcesDir
        metaModelsSourcesDir.mkdirs()
    }

    classpath = configurations.compile + configurations.querydslapt
    destinationDir = metaModelsSourcesDir

    source = sourceSets.main.java
    options.compilerArgs = [
            "-proc:only",
            /* we cannot use the com.querydsl.apt.jpa.JPAAnnotationProcessor anymore since our
            talent querying needs have complexified and we need some transient fields to be queryable (cf QueryableTalent) */
            "-processor", 'com.querydsl.apt.QuerydslAnnotationProcessor,lombok.launch.AnnotationProcessorHider$AnnotationProcessor',
            "-s", metaModelsSourcesDir
    ]
}

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    mapstructVersion = '1.2.0.Final'
    querydslVersion = '4.1.4'
    sendgridVersion = '4.1.2'
    simplejavamailVersion = '5.0.1'
    springCloudVersion = 'Edgware.RELEASE'
    vladmihalceaHibernateTypesVersion = '2.0.0'
}

dependencies {
    // WEB / REST
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.cloud:spring-cloud-starter-oauth2')
    compile('org.springframework.boot:spring-boot-starter-data-rest')
    // SERVICES
    compile("org.simplejavamail:simple-java-mail:${simplejavamailVersion}")
    compile("com.sendgrid:sendgrid-java:${sendgridVersion}")
    // PERSISTENCE
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.hibernate:hibernate-java8')
    compile("com.vladmihalcea:hibernate-types-5:${vladmihalceaHibernateTypesVersion}")
    compile("com.querydsl:querydsl-jpa:${querydslVersion}")
    querydslapt("com.querydsl:querydsl-apt:${querydslVersion}")
    //runtime('com.h2database:h2')
    runtime('org.postgresql:postgresql')
    // TEST
    //testCompile('org.springframework.boot:spring-boot-starter-test')
    //testCompile('org.springframework.security:spring-security-test')
    // MISC
    compileOnly("org.projectlombok:lombok")
    compile("org.mapstruct:mapstruct-jdk8:${mapstructVersion}")
    apt("org.mapstruct:mapstruct-processor:${mapstructVersion}", "org.projectlombok:lombok")
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
    compile('io.pebbletemplates:pebble:2.5.1')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
